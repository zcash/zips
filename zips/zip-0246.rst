::

  ZIP: 246
  Title: Digests for the Version 6 Transaction Format
  Owners: Arya <arya@zfnd.org>
          Conrado Gouvea <conrado@zfnd.org>
          Daira-Emma Hopwood <daira-emma@electriccoin.co>
          Jack Grigg <str4d@electriccoin.co>
          Kris Nuttycombe <kris@electriccoin.co>
  Status: Draft
  Category: Consensus
  Created: 2025-02-12
  License: MIT


===========
Terminology
===========

The key words "MUST" and "MUST NOT" in this document are to be interpreted as described
in BCP 14 [#BCP14]_ when, and only when, they appear in all capitals.

The terms "consensus branch", "epoch", and "network upgrade" in this document are to be
interpreted as described in ZIP 200. [#zip-0200]_

The term "field encoding" refers to the binary serialized form of a Zcash transaction
field, as specified in section 7.1 of the Zcash protocol specification
[#protocol-txnencoding]_.


========
Abstract
========

This ZIP defines the sighash algorithms associated with the v6 transaction
format.

This proposal also defines the new concept of "sighash algorithm versioning":
where previously each transaction version had a single associated sighash
algorithm, going forward it will be possible for signers to use any sighash
algorithm within the closed set specified for a given transaction version (and
made available in consensus via network upgrades).

==========
Motivation
==========

The motivation for sighash algorithm versioning is that we want to be able to
specify the V6 transaction format and signatures without knowing what the
signatures for atomic swaps in action bundles will need to commit to. This
allows for future signature hash algorithms to be specified for V6 transactions
that support signing parts of a transaction while leaving the remainder of the
transaction malleable, or that commit to additional state that nodes may start
tracking in a future upgrade and that is not part of an individual transaction
being signed.

Being able to remove support for sighash algorithm versions makes it possible
to respond effectively in the case that a bug is found in a previously deployed
sighash algorithm.

============
Requirements
============

- Continue to support existing functionality of the protocol (e.g. multisig and
  signing modes for transparent inputs).

- It should be possible to update this ZIP with additional sighash algorithm
  versions that might have divergent behavior with respect to previous
  versions, after previous versions have been deployed in network upgrades.

- It should be possible to disable support for sighash algorithm versions in
  network upgrades.

- At the time that one is making a signature, the set of valid sighash
  algorithm versions is known to consensus.

- Sighash version information is present alongside the signature. 

================
Non-requirements
================

- Sighash algorithm versioning as defined in this ZIP does not need to
  constrain how signature hashes are constructed for future transaction
  versions.

=============
Specification
=============

------------------
Sighash versioning
------------------

Rough summary:

- Sighash versions are numbered starting from 0 for each tx version.
- v0 is by convention the "commit to all effecting data" sighash algorithm. Other
  versions can commit to whatever makes sense for desired functionality within
  that tx version.
- Consensus rules choose the digest algorithm for each signer based on
  ``sighashVersion``.

The sighash version is encoded as a single byte alongside any associated data
that the sighash algorithm version requires (for deterministically computing the
digest):

``sighashInfo = [sighashVersion] || associatedData``

where ``associatedData`` is specific to the bundle it appears in.

The following sighash algorithm versions are defined for v6 transactions:

+--------------------+-------------------------------------------------------+
|                    |:math:`\hspace{4.5em}` ``associatedData``              |
+--------------------+-------------+-------------+-------------+-------------+
| ``sighashVersion`` | Transparent |   Sapling   |   Orchard   |  Issuance   |
+--------------------+-------------+-------------+-------------+-------------+
| 0                  |``[]``       |``[]``       |``[]``       |``[]``       |
+--------------------+-------------+-------------+-------------+-------------+

----------
v0 Digests
----------

The v0 digests are based on the v5 transaction digest algorithm defined in
ZIP 244 [#zip-0244]_.

TODO: Update the Authorizing Data Commitment below for the ``sighashInfo``
changes to the tx format.

TxId Digest
===========

The overall structure of the TxID digest is as follows; each name referenced
here will either be referenced or described in detail below::

    txid_digest
    ├── header_digest *
    ├── transparent_digest
    │   ├── prevouts_digest
    │   ├── sequence_digest
    │   └── outputs_digest
    ├── sapling_digest
    │   ├── sapling_spends_digest
    │   │   ├── sapling_spends_compact_digest
    │   │   └── sapling_spends_noncompact_digest
    │   ├── sapling_outputs_digest *
    │   │   ├── sapling_outputs_compact_digest *
    │   │   └── sapling_outputs_noncompact_digest *
    │   └── valueBalance
    ├── orchard_digest *
    │   ├── orchard_action_groups_digest *
    │   │   ├── orchard_actions_compact_digest *
    │   │   ├── orchard_actions_noncompact_digest *
    │   │   ├── flagsOrchard
    │   │   ├── anchorOrchard
    │   │   ├── nAGExpiryHeight *
    │   │   └── orchard_burn_digest *
    │   └── valueBalanceOrchard
    ├── issuance_digest *
    │   ├── issuerLength *
    │   ├── issuer * 
    │   └── issue_actions_digest *
    │       ├── assetDescHash *
    │       ├── issue_notes_digest *
    │       └── flagsIssuance *
    └── memo_digest *
        ├── nonce *
        └── memo_chunks_digest *
            └── memo_chunk_digest *

Each node written as ``snake_case`` in this tree is a BLAKE2b-256 hash of its
children, initialized with a personalization string specific to that branch
of the tree. Nodes that are not themselves digests are written in ``camelCase``.
In the specification below, nodes of the tree are presented in depth-first order.

The nodes with a ``*`` have new definitions given below. All other nodes have the
same definition as in ZIP 244 [#zip-0244]_.

txid_digest
-----------
A BLAKE2b-256 hash of the following values ::

   T.1: header_digest       (32-byte hash output)
   T.2: transparent_digest  (32-byte hash output)
   T.3: sapling_digest      (32-byte hash output)
   T.4: orchard_digest      (32-byte hash output)
   T.5: issuance_digest     (32-byte hash output)
   T.6: memo_digest         (32-byte hash output)

The personalization field of this hash is set to::

  "ZcashTxHash_" || CONSENSUS_BRANCH_ID

``ZcashTxHash_`` has 1 underscore character.

As in ZIP 244 [#zip-0244]_, CONSENSUS_BRANCH_ID is the 4-byte little-endian encoding of
the consensus branch ID for the epoch of the block containing the transaction.

T.1: header_digest
``````````````````
A BLAKE2b-256 hash of the following values ::

   T.1a: version             (4-byte little-endian version identifier including overwinter flag)
   T.1b: version_group_id    (4-byte little-endian version group identifier)
   T.1c: consensus_branch_id (4-byte little-endian consensus branch id)
   T.1d: lock_time           (4-byte little-endian nLockTime value)
   T.1e: expiry_height       (4-byte little-endian block height)
   T.1f: fee                 (8-byte little-endian fee amount)
   T.1g: burn_amount         (8-byte little-endian burn amount)

The personalization field of this hash is set to::

  "ZTxIdHeadersHash"

T.3b: sapling_outputs_digest
''''''''''''''''''''''''''''
In the case that Sapling outputs are present, this digest is a BLAKE2b-256 hash of the
following values ::

   T.3b.i:  sapling_outputs_compact_digest    (32-byte hash)
   T.3b.ii: sapling_outputs_noncompact_digest (32-byte hash)

The personalization field of this hash is set to::

  "ZTxIdSOutputHash"

In the case that the transaction has Sapling spends but no Sapling outputs,
``sapling_outputs_digest`` is ::

    BLAKE2b-256("ZTxIdSOutputHash", [])

T.3b.i: sapling_outputs_compact_digest
......................................
A BLAKE2b-256 hash of the subset of Sapling output information included in the
ZIP-307 [#zip-0307]_ ``CompactBlock`` format for all Sapling shielded outputs
belonging to the transaction. For each output, the following elements are included
in the hash::

   T.3b.i.1: cmu                  (field encoding bytes)
   T.3b.i.2: ephemeral_key        (field encoding bytes)
   T.3b.i.3: enc_ciphertext       (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxId6SOutC_Hash" (1 underscore character)

The field encodings are specified in ZIP 230 [#zip-0230-sapling-output-field-encodings]_.

T.3b.ii: sapling_outputs_noncompact_digest
...........................................
A BLAKE2b-256 hash of the remaining subset of Sapling output information **not** included
in the ZIP 307 [#zip-0307]_ ``CompactBlock`` format, excluding zkproof data, for all
Sapling shielded outputs belonging to the transaction. For each output, the following
elements are included in the hash::

   T.3b.ii.1: cv                    (field encoding bytes)
   T.3b.ii.3: out_ciphertext        (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxId6SOutN_Hash" (1 underscore character)

The field encodings are specified in ZIP 230 [#zip-0230-sapling-output-field-encodings]_.

T.4: orchard_digest
```````````````````
When OrchardZSA Actions Groups are present in the transaction, this digest is a BLAKE2b-256 hash of the following values::

    T.4a: orchard_action_groups_digest   (32-byte hash output)
    T.4b: valueBalanceOrchard            (64-bit signed little-endian)

The personalization field of this hash is set to::

    "ZTxIdOrchardHash"

In the case that the transaction has no OrchardZSA Action Groups, ``orchard_digest`` is ::

    BLAKE2b-256("ZTxIdOrchardHash", [])

T.4a: orchard_action_groups_digest
''''''''''''''''''''''''''''''''''

A BLAKE2b-256 hash of the subset of OrchardZSA Action Groups information for all OrchardZSA Action Groups belonging to the transaction.
For each Action Group, the following elements are included in the hash::

    T.4a.i   : orchard_actions_compact_digest      (32-byte hash output)
    T.4a.ii  : orchard_actions_noncompact_digest   (32-byte hash output)
    T.4a.iii : flagsOrchard                        (1 byte)
    T.4a.iv  : anchorOrchard                       (32 bytes)
    T.4a.v   : nAGExpiryHeight                     (4 bytes)
    T.4a.vi  : orchard_burn_digest                 (32-byte hash output)

The personalization field of this hash is set to::

    "ZTxIdOrcActGHash"

T.4a.i: orchard_actions_compact_digest
......................................

A BLAKE2b-256 hash of the subset of OrchardZSA Action information intended to be included in
an updated version of the ZIP-307 [#zip-0307]_ ``CompactBlock`` format for all OrchardZSA
Actions belonging to the Action Group. For each Action, the following elements are included
in the hash::

   T.4a.i.1 : nullifier            (field encoding bytes)
   T.4a.i.2 : cmx                  (field encoding bytes)
   T.4a.i.3 : ephemeralKey         (field encoding bytes)
   T.4a.i.4 : encCiphertext        (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxId6OActC_Hash" (1 underscore character)

The field encodings are specified in ZIP 230 [#zip-0230-orchardzsa-action-description-orchardzsaaction]_.

T.4a.ii: orchard_actions_noncompact_digest
..........................................

A BLAKE2b-256 hash of the remaining subset of OrchardZSA Action information **not** intended
for inclusion in an updated version of the the ZIP 307 [#zip-0307]_ ``CompactBlock``
format, for all OrchardZSA Actions belonging to the Action Group. For each Action,
the following elements are included in the hash::

   T.4a.ii.1 : cv                    (field encoding bytes)
   T.4a.ii.2 : rk                    (field encoding bytes)
   T.4a.ii.3 : outCiphertext         (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxId6OActN_Hash" (1 underscore character)

The field encodings are specified in ZIP 230 [#zip-0230-orchardzsa-action-description-orchardzsaaction]_.


T.4a.vi: orchard_burn_digest
''''''''''''''''''''''''''''

A BLAKE2b-256 hash of the data from the burn fields of the transaction. For each tuple in
the $\mathsf{assetBurn}$ set, the following elements are included in the hash::

    T.4b.i : assetBase    (field encoding bytes)
    T.4b.ii: valueBurn    (64-bit unsigned little-endian)

The personalization field of this hash is set to::

    "ZTxIdOrcBurnHash"

In case the transaction does not perform the burning of any Assets (i.e. the
$\mathsf{assetBurn}$ set is empty), the ``orchard_burn_digest`` is::

    BLAKE2b-256("ZTxIdOrcBurnHash", [])

The field encodings are specified in ZIP 230 [#zip-0230-orchardzsa-asset-burn-description]_.


T.5: issuance_digest
````````````````````
A BLAKE2b-256 hash of the following values ::

   T.5a: issuerLength            (field encoding bytes)
   T.5b: issuer                  (field encoding bytes)
   T.5c: issue_actions_digest    (32-byte hash output)

The personalization field of this hash is set to::

  "ZTxIdSAIssueHash"

In case the transaction has no issuance components, ``issuance_digest`` is::

    BLAKE2b-256("ZTxIdSAIssueHash", [])

The field encodings are specified in ZIP 230 [#zip-0230-transaction-format]_.

T.5a: issue_actions_digest
''''''''''''''''''''''''''
A BLAKE2b-256 hash of Issue Action information for all Issuance Actions belonging to the transaction. For each Action, the following elements are included in the hash::

   T.5a.i  : assetDescHash           (field encoding bytes)
   T.5a.ii : issue_notes_digest      (32-byte hash output)
   T.5a.iii: flagsIssuance           (1 byte)

The personalization field of this hash is set to::

  "ZTxIdIssuActHash"

The field encodings are specified in ZIP 230 [#zip-0230-issuance-action-description-issueaction]_.

T.5a.i: issue_notes_digest
..........................
A BLAKE2b-256 hash of Note information for all Issue Note Descriptions belonging to the Issuance Action. For each Note, the following elements are included in the hash::

   T.5a.i.1: recipient                    (field encoding bytes)
   T.5a.i.2: value                        (field encoding bytes)
   T.5a.i.3: rho                          (field encoding bytes)
   T.5a.i.4: rseed                        (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxIdIAcNoteHash"

In case the transaction has no Issue Notes, ``issue_notes_digest`` is::

    BLAKE2b-256("ZTxIdIAcNoteHash", [])

The field encodings are specified in ZIP 230 [#zip-0230-issue-note-description-issuenotedescription]_.

T.6: memo_digest
````````````````
A BLAKE2b-256 hash of the following values ::

   T.6a: nonce                 (field encoding bytes)
   T.6b: memo_chunks_digest    (32-byte hash output)

The personalization field of this hash is set to::

  "ZTxIdMemo___Hash" (3 underscore characters)

In case the transaction has no memo chunks, ``memo_digest`` is::

    BLAKE2b-256("ZTxIdMemo___Hash", [])

The field encodings are specified in ZIP 230 [#zip-0230-transaction-format]_.

T.6b: memo_chunks_digest
''''''''''''''''''''''''
A BLAKE2b-256 hash of the concatenated ``memo_chunk_digest`` values of all memo chunks
within the memo bundle.

The personalization field of this hash is set to::

  "ZTxIdMemoCksHash"

In the case that the transaction has no memo chunks,
``memo_chunks_digest`` is ::

  BLAKE2b-256("ZTxIdMemoCksHash", [])

T.6b.i: memo_chunk_digest
.........................
A BLAKE2b-256 hash of the field encoding of a single encrypted Memo Chunk.

The personalization field of this hash is set to::

  "ZTxIdMemoCk_Hash" (1 underscore character)

The field encodings are specified in ZIP 230 [#zip-0230-transaction-format]_.


Signature Digest
================

The per-input transaction digest algorithm to generate the signature digest in ZIP 244 [#zip-0244-sigdigest]_ is modified so that a signature digest is produced for each transparent input, each Sapling input, each OrchardZSA Action, and additionally for each Issuance Action.
The modifications replace the ``orchard_digest`` in ZIP 244 with a new ``orchard_digest``, and add a new branch, ``issuance_digest``, for the Issuance Action information.

The overall structure of the hash is as follows. We omit the descriptions of the sections that do not change for the OrchardZSA protocol::

    signature_digest
    ├── header_digest
    ├── transparent_sig_digest
    ├── sapling_digest
    ├── orchard_digest
    ├── issuance_digest
    └── memo_digest

signature_digest
----------------
A BLAKE2b-256 hash of the following values ::

   S.1: header_digest          (32-byte hash output)
   S.2: transparent_sig_digest (32-byte hash output)
   S.3: sapling_digest         (32-byte hash output)
   S.4: orchard_digest         (32-byte hash output)
   S.5: issuance_digest        (32-byte hash output)
   S.6: memo_digest            (32-byte hash output)

The personalization field remains the same as in ZIP 244 [#zip-0244]_, namely::

  "ZcashTxHash_" || CONSENSUS_BRANCH_ID

``ZcashTxHash_`` has 1 underscore character.

S.4: orchard_digest
```````````````````
Identical to that specified for the transaction identifier.

S.5: issuance_digest
````````````````````
Identical to the ``issuance_digest`` specified for the transaction identifier.

S.6: memo_digest
````````````````
Identical to that specified for the transaction identifier.


Authorizing Data Commitment
===========================

The transaction digest algorithm defined in ZIP 244 [#zip-0244-authcommitment]_ which commits to the authorizing data of a transaction is modified by the OrchardZSA protocol to have the structure specified in this section.
There is a new branch added for issuance information, and the ``orchard_auth_digest`` in ZIP 244 is altered to account for the presence of Action Groups.

We omit the descriptions of the sections that do not change for the OrchardZSA protocol::

    auth_digest
    ├── transparent_auth_digest
    ├── sapling_auth_digest
    ├── orchard_auth_digest
    └── issuance_auth_digest

The pair (Transaction Identifier, Auth Commitment) constitutes a commitment to all the data of a serialized transaction that may be included in a block.

auth_digest
-----------
A BLAKE2b-256 hash of the following values ::

   A.1: transparent_auth_digest          (32-byte hash output)
   A.2: sapling_auth_digest              (32-byte hash output)
   A.3: orchard_auth_digest              (32-byte hash output)
   A.4: issuance_auth_digest             (32-byte hash output)

The personalization field of this hash remains the same as in ZIP 244.

Note that while the structure of ``sapling_auth_digest`` remains the same as in ZIP 244, the field encodings of some of its components 
(viz. ``spend_auth_sigs`` and ``binding_sig``) differ due to changes to their field encodings in ZIP 230 [#zip-0230-transaction-format]_.


A.1: transparent_auth_digest
````````````````````````````

In the case that the transaction contains transparent inputs, this is a BLAKE2b-256 hash of the following values for each transparent input::

   A.1a: TransparentSighashInfo    (field encoding bytes)
   A.1b: scriptSig                 (field encoding bytes)

The personalization field of this hash is::

    "ZTxAuthTransHash"

In the case that the transaction has no transparent inputs, ``transparent_auth_digest`` is::

    BLAKE2b-256("ZTxAuthTransHash", [])

The field encoding of ``TransparentSighashInfo`` is specified in ZIP 230 [#zip-0230-transparent-sighash-info-field-encodings]_.

A.3: orchard_auth_digest
````````````````````````

In the case that OrchardZSA Action Groups are present, this is a BLAKE2b-256 hash of the following values::

    A.3a: orchard_action_groups_auth_digest    (32-byte hash output)
    A.3b: bindingSigOrchard                    (field encoding bytes)

The personalization field of this hash is the same as in ZIP 244, that is::

    "ZTxAuthOrchaHash"

In case that the transaction has no OrchardZSA Action Groups, ``orchard_auth_digest`` is::

    BLAKE2b-256("ZTxAuthOrchaHash", [])

The field encodings are specified in ZIP 230 [#zip-0230-transaction-format]_.
Note that this means the encoding of ``bindingSigOrchard`` differs from that used in ZIP 244.

A.3a: orchard_action_groups_auth_digest
'''''''''''''''''''''''''''''''''''''''

A BLAKE2b-256 hash of the subset of OrchardZSA Action Group information for all OrchardZSA Action Groups belonging to the transaction.
For each OrchardZSA Action Group, this is a BLAKE2b-256 hash of the following values::

    A.3a.i:  proofsOrchard                              (field encoding bytes)
    A.3a.ii: orchard_zsa_spend_auth_sigs_auth_digest    (32-byte hash output)

The personalization field of this hash is set to::

    "ZTxAuthOrcAGHash"

The field encodings are specified in ZIP 230 [#zip-0230-orchardzsa-action-group-description]_.

A.3a.ii: orchard_zsa_spend_auth_sigs_auth_digest
................................................

This is a BLAKE2b-256 hash of the concatenation of ``OrchardSignature`` encodings for the spend authorization signature of each OrchardZSA Action in the OrchardZSA Action Group (i.e. the contents of the ``vSpendAuthSigsOrchard`` field of the ``ActionGroupDescription``)::

    A.3a.ii.1: spendAuthSigsOrchard    (field encoding bytes)

The personalization field of this hash is set to::

    "ZTxAuthOrSASHash"

The encoding of ``OrchardSignature`` is specified in ZIP 230 [#zip-0230-orchard-signature-orchardsignature]_.
Note that this means the encoding of ``spendAuthSigsOrchard`` differs from that used in ZIP 244.

A.4: issuance_auth_digest
-------------------------

In the case that Issuance Actions are present, this is a BLAKE2b-256 hash of the field encoding of the ``issueAuthSig`` field of the transaction::

   A.4a: issueAuthSig            (field encoding bytes)

The personalization field of this hash is set to::

  "ZTxAuthZSAOrHash"

In the case that the transaction has no Orchard Actions, ``issuance_auth_digest`` is ::

  BLAKE2b-256("ZTxAuthZSAOrHash", [])

The field encodings are specified in ZIP 230 [#zip-0230-transaction-format]_.


=========
Rationale
=========

TBD

-----------------------------------------------------------------
Rationale for ``auth_digest`` domain separator reuse from ZIP 244
-----------------------------------------------------------------

An authorizing data commitment cannot be used without the context of a transaction ID. 
That is, it cannot be used independently from the ``version`` and ``versionGroupId`` fields committed to within the transaction ID.
Therefore, reusing the same personalization values within the authorizing data commitment tree as in ZIP 244 is safe, even though the structure may have changed.

========================
Reference implementation
========================

TBD


==========
References
==========

.. [#BCP14] `Information on BCP 14 — "RFC 2119: Key words for use in RFCs to Indicate Requirement Levels" and "RFC 8174: Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words" <https://www.rfc-editor.org/info/bcp14>`_
.. [#protocol] `Zcash Protocol Specification, Version 2024.5.1 or later [NU6] <protocol/protocol.pdf>`_
.. [#protocol-spenddesc] `Zcash Protocol Specification, Version 2024.5.1 [NU6]. Section 4.4: Spend Descriptions <protocol/protocol.pdf#spenddesc>`_
.. [#protocol-outputdesc] `Zcash Protocol Specification, Version 2024.5.1 [NU6]. Section 4.5: Output Descriptions <protocol/protocol.pdf#outputdesc>`_
.. [#protocol-actiondesc] `Zcash Protocol Specification, Version 2024.5.1 [NU6]. Section 4.6: Action Descriptions <protocol/protocol.pdf#actiondesc>`_
.. [#protocol-txnencoding] `Zcash Protocol Specification, Version 2022.3.8. Section 7.1: Transaction Encoding and Consensus <protocol/protocol.pdf#txnencoding>`_
.. [#zip-0200] `ZIP 200: Network Upgrade Mechanism <zip-0200.html>`_
.. [#zip-0230-transaction-format] `ZIP 230: Version 6 Transaction Format. Specification: Transaction Format <zip-0230.html#transaction-format>`_
.. [#zip-0230-orchardzsa-action-group-description] `ZIP 230: Version 6 Transaction Format. Specification: OrchardZSA Action Group Description  <zip-0230.html#orchardzsa-action-group-description>`_
.. [#zip-0230-orchardzsa-action-description-orchardzsaaction] `ZIP 230: Version 6 Transaction Format. Specification: OrchardZSA Action Description <zip-0230.html#orchardzsa-action-description-orchardzsaaction>`_
.. [#zip-0230-orchardzsa-asset-burn-description] `ZIP 230: Version 6 Transaction Format. Specification: OrchardZSA Asset Burn Description <zip-0230.html#orchardzsa-asset-burn-description>`_
.. [#zip-0230-sapling-output-field-encodings] `ZIP 230: Version 6 Transaction Format. Specification: Sapling Output Description (OutputDescriptionV6) <zip-0230.html#sapling-output-description-outputdescriptionv6>`_
.. [#zip-0230-transparent-sighash-info-field-encodings] `ZIP 230: Version 6 Transaction Format. Specification: Transparent Sighash Information <zip-0230.html#transparent-sighash-information-transparentsighashinfo>`_
.. [#zip-0230-orchard-signature-orchardsignature] `ZIP 230: Version 6 Transaction Format. Specification: Orchard Signature <zip-0230.html#orchard-signature-orchardsignature>`_
.. [#zip-0230-issuance-action-description-issueaction] `ZIP 230: Version 6 Transaction Format. Specification: Issuance Action Description <zip-0230.html#issuance-action-description-issueaction>`_
.. [#zip-0230-issue-note-description-issuenotedescription] `ZIP 230: Version 6 Transaction Format. Specification: Issue Note Description <zip-0230.html#issue-note-description-issuenotedescription>`_
.. [#zip-0244] `ZIP 244: Transaction Identifier Non-Malleability <zip-0244.html>`_
.. [#zip-0244-sigdigest] `ZIP 244: Transaction Identifier Non-Malleability: Signature Digest <zip-0244.html#signature-digest>`_
.. [#zip-0244-authcommitment] `ZIP 244: Transaction Identifier Non-Malleability: Authorizing Data Commitment <zip-0244.html#authorizing-data-commitment>`_
.. [#zip-0307] `ZIP 307: Light Client Protocol for Payment Detection <zip-0307.html>`_
